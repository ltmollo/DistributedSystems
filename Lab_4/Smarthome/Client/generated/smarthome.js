//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

/* eslint-disable */
/* jshint ignore: start */

(function(module, require, exports)
{
    const Ice = require("ice").Ice;
    const _ModuleRegistry = Ice._ModuleRegistry;
    const Slice = Ice.Slice;

    let Smarthome = _ModuleRegistry.module("Smarthome");

    Smarthome.SmarthomeException = class extends Ice.UserException
    {
        constructor(message = "", _cause = "")
        {
            super(_cause);
            this.message = message;
        }

        static get _parent()
        {
            return Ice.UserException;
        }

        static get _id()
        {
            return "::Smarthome::SmarthomeException";
        }

        _mostDerivedType()
        {
            return Smarthome.SmarthomeException;
        }

        _writeMemberImpl(ostr)
        {
            ostr.writeString(this.message);
        }

        _readMemberImpl(istr)
        {
            this.message = istr.readString();
        }
    };

    Smarthome.TurnDeviceException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::TurnDeviceException";
        }

        _mostDerivedType()
        {
            return Smarthome.TurnDeviceException;
        }
    };

    const iceC_Smarthome_IDevice_ids = [
        "::Ice::Object",
        "::Smarthome::IDevice"
    ];

    Smarthome.IDevice = class extends Ice.Object
    {
    };

    Smarthome.IDevicePrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Smarthome.IDevice, Smarthome.IDevicePrx, iceC_Smarthome_IDevice_ids, 1,
    {
        "getState": [, 2, 2, , [1], , , , , ],
        "turnOn": [, , , , [1], , ,
        [
            Smarthome.TurnDeviceException
        ], , ],
        "turnOff": [, , , , [1], , ,
        [
            Smarthome.TurnDeviceException
        ], , ]
    });

    Smarthome.InvalidVolumeException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidVolumeException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidVolumeException;
        }
    };

    const iceC_Smarthome_ISpeaker_ids = [
        "::Ice::Object",
        "::Smarthome::IDevice",
        "::Smarthome::ISpeaker"
    ];

    Smarthome.ISpeaker = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.IDevice
            ];
        }
    };

    Smarthome.ISpeakerPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.IDevicePrx];
        }
    };

    Slice.defineOperations(Smarthome.ISpeaker, Smarthome.ISpeakerPrx, iceC_Smarthome_ISpeaker_ids, 2,
    {
        "getVolume": [, 2, 2, , [3], , , , , ],
        "setVolume": [, 2, 2, , [1], [[3]], ,
        [
            Smarthome.InvalidVolumeException
        ], , ]
    });

    Smarthome.Channel = Slice.defineEnum([
        ['TVP1', 0], ['TVP2', 1], ['TVPINFO', 2], ['TVN', 3], ['POLSAT', 4],
        ['TVTRWAM', 5]]);

    Smarthome.InvalidChannelException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidChannelException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidChannelException;
        }
    };

    Slice.defineSequence(Smarthome, "channelsHelper", "Smarthome.Channel._helper", false);

    const iceC_Smarthome_ITelevision_ids = [
        "::Ice::Object",
        "::Smarthome::IDevice",
        "::Smarthome::ISpeaker",
        "::Smarthome::ITelevision"
    ];

    Smarthome.ITelevision = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.ISpeaker
            ];
        }
    };

    Smarthome.ITelevisionPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.ISpeakerPrx];
        }
    };

    Slice.defineOperations(Smarthome.ITelevision, Smarthome.ITelevisionPrx, iceC_Smarthome_ITelevision_ids, 3,
    {
        "getChannel": [, 2, 2, , [Smarthome.Channel._helper], , , , , ],
        "getChannels": [, 2, 2, , ["Smarthome.channelsHelper"], , , , , ],
        "setChannel": [, 2, 2, , [1], [[Smarthome.Channel._helper]], ,
        [
            Smarthome.InvalidChannelException
        ], , ]
    });

    Smarthome.Movie = class
    {
        constructor(title = "", director = "", mainActor = "", duration = 0.0)
        {
            this.title = title;
            this.director = director;
            this.mainActor = mainActor;
            this.duration = duration;
        }

        _write(ostr)
        {
            ostr.writeString(this.title);
            ostr.writeString(this.director);
            ostr.writeString(this.mainActor);
            ostr.writeDouble(this.duration);
        }

        _read(istr)
        {
            this.title = istr.readString();
            this.director = istr.readString();
            this.mainActor = istr.readString();
            this.duration = istr.readDouble();
        }

        static get minWireSize()
        {
            return  11;
        }
    };

    Slice.defineStruct(Smarthome.Movie, false, true);

    Smarthome.InvalidMovieException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidMovieException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidMovieException;
        }
    };

    const iceC_Smarthome_IDVD_ids = [
        "::Ice::Object",
        "::Smarthome::IDVD",
        "::Smarthome::IDevice",
        "::Smarthome::ISpeaker"
    ];

    Smarthome.IDVD = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.ISpeaker
            ];
        }
    };

    Smarthome.IDVDPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.ISpeakerPrx];
        }
    };

    Slice.defineOperations(Smarthome.IDVD, Smarthome.IDVDPrx, iceC_Smarthome_IDVD_ids, 1,
    {
        "getMovie": [, 2, 2, , [Smarthome.Movie], , , , , ],
        "setMovie": [, 2, 2, , [1], [[Smarthome.Movie]], ,
        [
            Smarthome.InvalidMovieException
        ], , ]
    });

    Smarthome.Genre = Slice.defineEnum([
        ['ROCK', 0], ['POP', 1], ['JAZZ', 2], ['RAP', 3], ['METAL', 4]]);

    Smarthome.InvalidGenreException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidGenreException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidGenreException;
        }
    };

    Smarthome.Song = class
    {
        constructor(title = "", artist = "", duration = 0.0, genre = Smarthome.Genre.ROCK)
        {
            this.title = title;
            this.artist = artist;
            this.duration = duration;
            this.genre = genre;
        }

        _write(ostr)
        {
            ostr.writeString(this.title);
            ostr.writeString(this.artist);
            ostr.writeDouble(this.duration);
            Smarthome.Genre._write(ostr, this.genre);
        }

        _read(istr)
        {
            this.title = istr.readString();
            this.artist = istr.readString();
            this.duration = istr.readDouble();
            this.genre = Smarthome.Genre._read(istr);
        }

        static get minWireSize()
        {
            return  11;
        }
    };

    Slice.defineStruct(Smarthome.Song, false, true);

    Smarthome.InvalidSongException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidSongException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidSongException;
        }
    };

    Smarthome.PauseMP3Exception = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::PauseMP3Exception";
        }

        _mostDerivedType()
        {
            return Smarthome.PauseMP3Exception;
        }
    };

    const iceC_Smarthome_IMP3Player_ids = [
        "::Ice::Object",
        "::Smarthome::IDevice",
        "::Smarthome::IMP3Player",
        "::Smarthome::ISpeaker"
    ];

    Smarthome.IMP3Player = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.ISpeaker
            ];
        }
    };

    Smarthome.IMP3PlayerPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.ISpeakerPrx];
        }
    };

    Slice.defineOperations(Smarthome.IMP3Player, Smarthome.IMP3PlayerPrx, iceC_Smarthome_IMP3Player_ids, 2,
    {
        "getSong": [, 2, 2, , [Smarthome.Song], , , , , ],
        "setSong": [, 2, 2, , [1], [[Smarthome.Song]], ,
        [
            Smarthome.InvalidSongException
        ], , ],
        "pause": [, 2, 2, , [1], , ,
        [
            Smarthome.PauseMP3Exception
        ], , ],
        "unpause": [, 2, 2, , [1], , ,
        [
            Smarthome.PauseMP3Exception
        ], , ]
    });

    const iceC_Smarthome_ISensor_ids = [
        "::Ice::Object",
        "::Smarthome::ISensor"
    ];

    Smarthome.ISensor = class extends Ice.Object
    {
    };

    Smarthome.ISensorPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Smarthome.ISensor, Smarthome.ISensorPrx, iceC_Smarthome_ISensor_ids, 1,
    {
        "getMeasurement": [, , , , [6], , , , , ]
    });

    const iceC_Smarthome_IThermometer_ids = [
        "::Ice::Object",
        "::Smarthome::ISensor",
        "::Smarthome::IThermometer"
    ];

    Smarthome.IThermometer = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.ISensor
            ];
        }
    };

    Smarthome.IThermometerPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.ISensorPrx];
        }
    };

    Slice.defineOperations(Smarthome.IThermometer, Smarthome.IThermometerPrx, iceC_Smarthome_IThermometer_ids, 2,
    {
        "countInFahrenheit": [, , , , [6], , , , , ]
    });

    const iceC_Smarthome_ICO_ids = [
        "::Ice::Object",
        "::Smarthome::ICO",
        "::Smarthome::ISensor"
    ];

    Smarthome.ICO = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.ISensor
            ];
        }
    };

    Smarthome.ICOPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.ISensorPrx];
        }
    };

    Slice.defineOperations(Smarthome.ICO, Smarthome.ICOPrx, iceC_Smarthome_ICO_ids, 1,
    {
        "alarm": [, , , , [1], , , , , ]
    });

    Smarthome.CoffeeUnderflowException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::CoffeeUnderflowException";
        }

        _mostDerivedType()
        {
            return Smarthome.CoffeeUnderflowException;
        }
    };

    Smarthome.WaterUnderflowException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::WaterUnderflowException";
        }

        _mostDerivedType()
        {
            return Smarthome.WaterUnderflowException;
        }
    };

    Smarthome.InvalidAmountException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidAmountException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidAmountException;
        }
    };

    Smarthome.CoffeeType = Slice.defineEnum([
        ['ESPRESSO', 0], ['CAPPUCINO', 1], ['LATTEMACCHIATO', 2], ['WITMILK', 3]]);

    Smarthome.CoffeeStrength = Slice.defineEnum([
        ['LIGHT', 0], ['MEDIUM', 1], ['STRONG', 2]]);

    Smarthome.Coffee = class
    {
        constructor(type = Smarthome.CoffeeType.ESPRESSO, strength = Smarthome.CoffeeStrength.LIGHT)
        {
            this.type = type;
            this.strength = strength;
        }

        _write(ostr)
        {
            Smarthome.CoffeeType._write(ostr, this.type);
            Smarthome.CoffeeStrength._write(ostr, this.strength);
        }

        _read(istr)
        {
            this.type = Smarthome.CoffeeType._read(istr);
            this.strength = Smarthome.CoffeeStrength._read(istr);
        }

        static get minWireSize()
        {
            return  2;
        }
    };

    Slice.defineStruct(Smarthome.Coffee, true, true);

    Smarthome.InvalidCoffeeException = class extends Smarthome.SmarthomeException
    {
        constructor(message, _cause = "")
        {
            super(message, _cause);
        }

        static get _parent()
        {
            return Smarthome.SmarthomeException;
        }

        static get _id()
        {
            return "::Smarthome::InvalidCoffeeException";
        }

        _mostDerivedType()
        {
            return Smarthome.InvalidCoffeeException;
        }
    };

    Slice.defineSequence(Smarthome, "coffeeTypesHelper", "Smarthome.CoffeeType._helper", false);

    Slice.defineSequence(Smarthome, "coffeeStrengthsHelper", "Smarthome.CoffeeStrength._helper", false);

    const iceC_Smarthome_ICoffeeMaker_ids = [
        "::Ice::Object",
        "::Smarthome::ICoffeeMaker",
        "::Smarthome::IDevice"
    ];

    Smarthome.ICoffeeMaker = class extends Ice.Object
    {
        static get _iceImplements()
        {
            return [
                Smarthome.IDevice
            ];
        }
    };

    Smarthome.ICoffeeMakerPrx = class extends Ice.ObjectPrx
    {
        static get _implements()
        {
            return [
                Smarthome.IDevicePrx];
        }
    };

    Slice.defineOperations(Smarthome.ICoffeeMaker, Smarthome.ICoffeeMakerPrx, iceC_Smarthome_ICoffeeMaker_ids, 1,
    {
        "getWaterLevel": [, 2, 2, , [3], , , , , ],
        "getCoffeeLevel": [, 2, 2, , [3], , , , , ],
        "getCurrentCoffee": [, 2, 2, , [Smarthome.Coffee], , , , , ],
        "setCoffee": [, 2, 2, , [1], [[Smarthome.Coffee]], ,
        [
            Smarthome.InvalidCoffeeException
        ], , ],
        "makeCoffee": [, 2, 2, , [Smarthome.Coffee], , ,
        [
            Smarthome.CoffeeUnderflowException,
            Smarthome.WaterUnderflowException
        ], , ],
        "getCoffeeTypes": [, 2, 2, , ["Smarthome.coffeeTypesHelper"], , , , , ],
        "getCoffeeStrengths": [, 2, 2, , ["Smarthome.coffeeStrengthsHelper"], , , , , ],
        "addWater": [, , , , [1], [[3]], ,
        [
            Smarthome.InvalidAmountException
        ], , ],
        "addCoffee": [, , , , [1], [[3]], ,
        [
            Smarthome.InvalidAmountException
        ], , ]
    });

    Smarthome.DeviceType = Slice.defineEnum([
        ['MP3PLAYER', 0], ['TELEVISION', 1], ['CO', 2], ['THERMOMETER', 3], ['COFFEEMAKER', 4]]);

    Smarthome.DeviceInfo = class
    {
        constructor(name = "", type = Smarthome.DeviceType.MP3PLAYER, server = 0)
        {
            this.name = name;
            this.type = type;
            this.server = server;
        }

        _write(ostr)
        {
            ostr.writeString(this.name);
            Smarthome.DeviceType._write(ostr, this.type);
            ostr.writeInt(this.server);
        }

        _read(istr)
        {
            this.name = istr.readString();
            this.type = Smarthome.DeviceType._read(istr);
            this.server = istr.readInt();
        }

        static get minWireSize()
        {
            return  6;
        }
    };

    Slice.defineStruct(Smarthome.DeviceInfo, true, true);

    Slice.defineSequence(Smarthome, "deviceListHelper", "Smarthome.DeviceInfo", false);

    const iceC_Smarthome_IDeviceManager_ids = [
        "::Ice::Object",
        "::Smarthome::IDeviceManager"
    ];

    Smarthome.IDeviceManager = class extends Ice.Object
    {
    };

    Smarthome.IDeviceManagerPrx = class extends Ice.ObjectPrx
    {
    };

    Slice.defineOperations(Smarthome.IDeviceManager, Smarthome.IDeviceManagerPrx, iceC_Smarthome_IDeviceManager_ids, 1,
    {
        "getDeviceList": [, 2, 2, , ["Smarthome.deviceListHelper"], , , , , ]
    });
    exports.Smarthome = Smarthome;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self.Ice._require : window.Ice._require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports :
 (typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope) ? self : window));
