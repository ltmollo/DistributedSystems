//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `smarthome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Smarthome;

public class Movie implements java.lang.Cloneable,
                              java.io.Serializable
{
    public String title;

    public String director;

    public String mainActor;

    public double duration;

    public Movie()
    {
        this.title = "";
        this.director = "";
        this.mainActor = "";
    }

    public Movie(String title, String director, String mainActor, double duration)
    {
        this.title = title;
        this.director = director;
        this.mainActor = mainActor;
        this.duration = duration;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        Movie r = null;
        if(rhs instanceof Movie)
        {
            r = (Movie)rhs;
        }

        if(r != null)
        {
            if(this.title != r.title)
            {
                if(this.title == null || r.title == null || !this.title.equals(r.title))
                {
                    return false;
                }
            }
            if(this.director != r.director)
            {
                if(this.director == null || r.director == null || !this.director.equals(r.director))
                {
                    return false;
                }
            }
            if(this.mainActor != r.mainActor)
            {
                if(this.mainActor == null || r.mainActor == null || !this.mainActor.equals(r.mainActor))
                {
                    return false;
                }
            }
            if(this.duration != r.duration)
            {
                return false;
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::Smarthome::Movie");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, title);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, director);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, mainActor);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, duration);
        return h_;
    }

    public Movie clone()
    {
        Movie c = null;
        try
        {
            c = (Movie)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeString(this.title);
        ostr.writeString(this.director);
        ostr.writeString(this.mainActor);
        ostr.writeDouble(this.duration);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.title = istr.readString();
        this.director = istr.readString();
        this.mainActor = istr.readString();
        this.duration = istr.readDouble();
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, Movie v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public Movie ice_read(com.zeroc.Ice.InputStream istr)
    {
        Movie v = new Movie();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<Movie> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, Movie v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<Movie> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(Movie.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final Movie _nullMarshalValue = new Movie();

    /** @hidden */
    public static final long serialVersionUID = 1289012203L;
}
